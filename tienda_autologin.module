<?php
/**
 * @file
 * Module for the Tienda autologin User Entity.
 */
use \Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Session\AccountInterface;
use GuzzleHttp\Exception\RequestException;
use Drupal\Component\Serialization\Json;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\Render\Markup;

function tienda_autologin_mail_alter(&$message) {
  //modificar la URL de login reset password
  if ($message['id'] == 'modulename_messagekey') {

  }
}

/**
 * hook_preprocess_page
 */
function tienda_autologin_preprocess(&$variables, $hook) {
  $config =  \Drupal::config('tienda_autologin.configuration');

  $pagina_ok_edituser = $config->get('pagina_ok_edituser');
  $pagina_ok_autologin = $config->get('pagina_ok_autologin');
  $pagina_ok_resetpassword = $config->get('pagina_ok_resetpassword');
  $pagina_host = $config->get('backend_url');

  //user external
  $variables['#attached']['drupalSettings']['tienda_autologin']['user_external'] = 0;
  if (!empty($_COOKIE['tienda_autologin'])) {
    $cookie_value = $_COOKIE['tienda_autologin'];
    $authentication = \Drupal::service('tienda_autologin.externalauth');
    $user_external = $authentication->getCurrentUser($cookie_value);
    $variables['#attached']['drupalSettings']['tienda_autologin']['user_external'] = $user_external[0]['uid'][0]['value'];
  }

  $variables['#attached']['library'][] = 'tienda_autologin/tienda_autologin';
  $variables['#attached']['drupalSettings']['tienda_autologin']['redirect_edituser'] = $pagina_ok_edituser;
  $variables['#attached']['drupalSettings']['tienda_autologin']['redirect_register'] = $pagina_ok_autologin;
  $variables['#attached']['drupalSettings']['tienda_autologin']['redirect_resetpassword'] = $pagina_ok_resetpassword;
  $variables['#attached']['drupalSettings']['tienda_autologin']['redirect_host'] = $pagina_host;
} 

/**
 * Implements hook_form_alter().
 */
function tienda_autologin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_form':
      //$config =  \Drupal::config('tienda_autologin.configuration');

      $form['more-links']['#suffix'] = Markup::create('<div id="load-register-form-auto-login">
        <div class="modales modal fade" tabindex="-1" id="modal-load-register-form-auto-login" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <section class="E-espacio-cabecera G-fondo--blanco">
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" style="float:right; padding-right: 25px; margin-top: -10px; box-shadow: none;"></button>
                <div class="G-max--700 G-margen--auto" style="padding: 44px 20px 120px">
                  <h3 style="padding-left: 44px; padding-right: 44px; font-weight: bold" class="G-txt--mayus G-txt--cen G-color--primario G-txt--xl G-margen--xxm G-margen--lr-0 G-margen--top-0">Registro del usuario</h3>
                  <div id="load-register-form-content"></div>
                </div>
              </section>
            </div>
          </div>
        </div>
      </div>');

      //$form['#attached']['library'][] = 'tienda_autologin/tienda_autologin';
      //$form['#attached']['drupalSettings']['tienda_autologin']['redirect_register'] = $pagina_ok_autologin;
      //$form['#attached']['drupalSettings']['tienda_autologin']['redirect_resetpassword'] = $pagina_ok_resetpassword;
      //$form['#attached']['drupalSettings']['tienda_autologin']['redirect_host'] = $pagina_host;

      $config =  \Drupal::config('tienda_autologin.configuration');
      if (@in_array('::validateFinal', $form['#validate'])) {
        if ($config->get('backend_url')) {
          $key = array_search('::validateFinal', $form['#validate']);
          $form['#validate'][$key] = 'tienda_autologin_auth_authenticate';
          $form['#validate'][] = 'tienda_autologin_get_account';
          $form['#validate'][] = '::validateFinal';
        }
      }
      break;
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function tienda_autologin_auth_authenticate(&$form, FormStateInterface $form_state) {
  if (!$form_state->get('uid')) {
    $user_name = $form_state->getValue('name');
    $user_pass = trim($form_state->getValue('pass'));

    $authentication = \Drupal::service('tienda_autologin.externalauth');
    $response = $authentication->login($user_name, $user_pass); 

    if (!empty($response["error"])) {
      $key = key($response["error"]);
      return $form_state->setErrorByName('name', $response["error"][$key]);
    }

    $cookie_value = $response['cookie'];

    $content_user = $response['body'];
    $uid = $content_user['current_user']['uid'];

    $form_state->setValue('current_user_uid', $uid);
    $form_state->setValue('current_user_cookie', $cookie_value);

    $session = \Drupal::request()->getSession();
    $session->set('tienda_autologin_user', $cookie_value);
    setcookie('tienda_autologin', $cookie_value, time() + 86400, '/');
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function tienda_autologin_get_account(&$form, FormStateInterface $form_state) {
  $authentication = \Drupal::service('tienda_autologin.externalauth');
  $cookie_value = $form_state->getValue('current_user_cookie');

  //auto login
  $status_user = $authentication->getLoginStatus($cookie_value);
  if ($status_user) {
    $uid = $form_state->getValue('current_user_uid');
    $user_values = $authentication->getUser($cookie_value, $uid);

    //destroy values
    unset($user_values['uid']);
    unset($user_values['uuid']);

    $email = $user_values['mail'][0]['value'];
    if ($account = user_load_by_mail($email)) {
      //user_login_finalize($account);
    }
    else {// Create user object.
      $account = User::create();
      foreach ($user_values as $key => $datas) {
        foreach ($datas as $data) {
          if (!empty($data['value'])) {
            $account->set($key, $data['value']);
          }
        }
      }
      $account->enforceIsNew();
      $account->activate();
      $account->save();
    }
    $form_state->set('uid', $account->id());

    if (!$account->isActive()) {
      //destroy cookie tienda_autologin_user
      user_logout();

      return $form_state->setErrorByName('name', t("El usuario no ha sido activado o estÃ¡ bloqueado."));
    }
  }
  return $form;
}

/**
 * Implements hook_user_login().
 */
function tienda_autologin_user_login($account) {
  $config =  \Drupal::config('tienda_autologin.configuration');
  $api_url = $config->get('backend_url');

  $session = \Drupal::request()->getSession();
  $cookie_value = $session->get('tienda_autologin_user', null);

  if (!empty($cookie_value)) {
    $host = \Drupal::request()->getSchemeAndHttpHost();
    $host = urlencode($host);

    $homeResponse = new RedirectResponse("{$api_url}/tienda/synclogin/{$cookie_value}?redirect={$host}&autologin=login");
    return $homeResponse->send();
  }
}

/**
 * hook_user_logout
 */
function tienda_autologin_user_logout(AccountInterface $account) {
  $config =  \Drupal::config('tienda_autologin.configuration');
  $api_url = $config->get('backend_url');

  $format = 'json';
  if (!empty($api_url)) {
    try {
      if (!empty($_COOKIE['tienda_autologin'])) {
        $cookie_value = $_COOKIE['tienda_autologin'];

        $client = \Drupal::httpClient();
        $response = $client->get("{$api_url}/user/logout?_format={$format}", [
          'headers' => [
            'Accept' => "application/{$format}", 
            'Content-Type' => "application/{$format}",
            'Cookie' => $cookie_value
          ],
          'verify' => boolval($config->get('certificate_url'))
        ]);
        $response = $response->getBody()->getContents();
    
        //destroy cookie tienda_autologin_user
        setcookie('tienda_autologin', '', \Drupal::time()->getRequestTime() - 3600, '/');
        unset($_COOKIE['tienda_autologin']);
      }
    } catch (RequestException $e) {
      if (!$e->hasResponse()) {
        throw $e;
      }
      $response = $e->getResponse();
  
      $data = Json::Decode($response->getBody()->getContents());
      $messenger = \Drupal::Messenger();
      $messenger->addMessage($data["message"],$messenger::TYPE_ERROR,true);
      $response = new RedirectResponse('user');
      return $response;
    }
  }
}