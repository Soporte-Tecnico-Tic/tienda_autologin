<?php
/**
 * @file
 * Module for the Tienda Decoupled User Entity.
 */
use \Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Session\AccountInterface;
use GuzzleHttp\Exception\RequestException;
use Drupal\Component\Serialization\Json;

/**
 * Implements hook_form_alter().
 */
function tienda_decoupled_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_form':
      //esclude validate of module user
      $new_validate = [];
      foreach ($form['#validate'] as $validate) {
        if (!in_array($validate, ["::validateName", "::validateAuthentication", "::validateFinal"])) {
          $new_validate[] = $validate;
        }
      }
      $form['#validate'] = $new_validate;
      array_unshift($form['#submit'], 'submitFormExternalLogin');
      break;
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function submitFormExternalLogin(&$form, FormStateInterface $form_state) {
  $user_name = $form_state->getValue('name');
  $user_pass = $form_state->getValue('pass');

  $authentication = \Drupal::service('tienda_decoupled.externalauth');
  $response = $authentication->login($user_name, $user_pass);
  if (!empty($response["error"])) {
    $messenger = \Drupal::Messenger();
    $messenger->addMessage($response["error"],$messenger::TYPE_ERROR,true);
    $response = new RedirectResponse('user');
    return $response;
  }
}

/**
 * hook_user_logout
 */
function tienda_decoupled_user_logout(AccountInterface $account) {
  try {
    $client = \Drupal::httpClient();
    $config =  \Drupal::config('tienda_decoupled.configuration');
    $api_url = $config->get('backend_url');
    $response = $client->get("{$api_url}/user/logout?_format=json", ['verify' => false]);
    $response = $response->getBody()->getContents();

    //destroy cookie tienda_decoupled_user
    setcookie('tiendadecoupleduser', '', \Drupal::time()->getRequestTime() - 3600, '/');
  } catch (RequestException $e) {
    if (!$e->hasResponse()) {
      throw $e;
    }
    $response = $e->getResponse();

    $data = Json::Decode($response->getBody()->getContents());

    $messenger = \Drupal::Messenger();
    $messenger->addMessage($data["message"],$messenger::TYPE_ERROR,true);
    $response = new RedirectResponse('user');
    return $response;
  }
}